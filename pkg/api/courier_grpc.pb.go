// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: courier.proto

package courier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourierService_CreateCourier_FullMethodName   = "/courier.CourierService/CreateCourier"
	CourierService_GetCourier_FullMethodName      = "/courier.CourierService/GetCourier"
	CourierService_GetActiveOrders_FullMethodName = "/courier.CourierService/GetActiveOrders"
)

// CourierServiceClient is the client API for CourierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierServiceClient interface {
	CreateCourier(ctx context.Context, in *CreateCourierRequest, opts ...grpc.CallOption) (*CreateCourierResponse, error)
	GetCourier(ctx context.Context, in *GetCourierRequest, opts ...grpc.CallOption) (*GetCourierResponse, error)
	GetActiveOrders(ctx context.Context, in *GetActiveOrdersRequest, opts ...grpc.CallOption) (*GetActiveOrdersResponse, error)
}

type courierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierServiceClient(cc grpc.ClientConnInterface) CourierServiceClient {
	return &courierServiceClient{cc}
}

func (c *courierServiceClient) CreateCourier(ctx context.Context, in *CreateCourierRequest, opts ...grpc.CallOption) (*CreateCourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourierResponse)
	err := c.cc.Invoke(ctx, CourierService_CreateCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierServiceClient) GetCourier(ctx context.Context, in *GetCourierRequest, opts ...grpc.CallOption) (*GetCourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourierResponse)
	err := c.cc.Invoke(ctx, CourierService_GetCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierServiceClient) GetActiveOrders(ctx context.Context, in *GetActiveOrdersRequest, opts ...grpc.CallOption) (*GetActiveOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveOrdersResponse)
	err := c.cc.Invoke(ctx, CourierService_GetActiveOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierServiceServer is the server API for CourierService service.
// All implementations must embed UnimplementedCourierServiceServer
// for forward compatibility.
type CourierServiceServer interface {
	CreateCourier(context.Context, *CreateCourierRequest) (*CreateCourierResponse, error)
	GetCourier(context.Context, *GetCourierRequest) (*GetCourierResponse, error)
	GetActiveOrders(context.Context, *GetActiveOrdersRequest) (*GetActiveOrdersResponse, error)
	mustEmbedUnimplementedCourierServiceServer()
}

// UnimplementedCourierServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourierServiceServer struct{}

func (UnimplementedCourierServiceServer) CreateCourier(context.Context, *CreateCourierRequest) (*CreateCourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourier not implemented")
}
func (UnimplementedCourierServiceServer) GetCourier(context.Context, *GetCourierRequest) (*GetCourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourier not implemented")
}
func (UnimplementedCourierServiceServer) GetActiveOrders(context.Context, *GetActiveOrdersRequest) (*GetActiveOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveOrders not implemented")
}
func (UnimplementedCourierServiceServer) mustEmbedUnimplementedCourierServiceServer() {}
func (UnimplementedCourierServiceServer) testEmbeddedByValue()                        {}

// UnsafeCourierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierServiceServer will
// result in compilation errors.
type UnsafeCourierServiceServer interface {
	mustEmbedUnimplementedCourierServiceServer()
}

func RegisterCourierServiceServer(s grpc.ServiceRegistrar, srv CourierServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourierServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourierService_ServiceDesc, srv)
}

func _CourierService_CreateCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).CreateCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_CreateCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).CreateCourier(ctx, req.(*CreateCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierService_GetCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).GetCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_GetCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).GetCourier(ctx, req.(*GetCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierService_GetActiveOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).GetActiveOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_GetActiveOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).GetActiveOrders(ctx, req.(*GetActiveOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierService_ServiceDesc is the grpc.ServiceDesc for CourierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "courier.CourierService",
	HandlerType: (*CourierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourier",
			Handler:    _CourierService_CreateCourier_Handler,
		},
		{
			MethodName: "GetCourier",
			Handler:    _CourierService_GetCourier_Handler,
		},
		{
			MethodName: "GetActiveOrders",
			Handler:    _CourierService_GetActiveOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courier.proto",
}
